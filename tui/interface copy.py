import urwid
from address_book.Addressbook import AddressBook
from address_book.models_book import Record


class ContactBookApp:
    def __init__(self, book: AddressBook):
        self.book = book
        self.overlay_open = False  # —Ñ–ª–∞–≥ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–∫–Ω–∞ overlay
        self.COLUMN_WEIGHTS = [14, 20, 20, 10, 10, 10]
        self.HEADERS = [" Name", "Phone", "Email",
                        "Address", "Birthday", "Notes"]

        self.palette = [
            ('header', 'white', 'dark blue'),
            ('footer', 'black', 'light gray'),
            ('selected', 'black', 'light cyan'),
            ('default', 'white', 'black'),
            ('button_green', 'black', 'dark green'),
            ('button_green_focus', 'white', 'dark green', 'bold'),
            ('button_red', 'white', 'dark red'),
            ('button_red_focus', 'black', 'dark red', 'bold'),
        ]

        # —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Ñ—É—Ç–µ—Ä–∞:
        self.menu = urwid.Text(
            "[‚Üë/‚Üì] Move  [Enter] Select  [A]dd  [E]dit  [D]elete [Q]uit", align='center')
        self.footer = urwid.AttrMap(self.menu, 'footer')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        self.header_row = self.create_table_row('header',
                                                self.HEADERS, is_header=True)
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
        self.walker = urwid.SimpleFocusListWalker(self.build_contact_list())
        self.listbox = urwid.ListBox(self.walker)
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.list_area = urwid.Pile([
            ('pack', self.header_row),
            self.listbox
        ])

        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥, –æ–±—ë—Ä–Ω—É—Ç—ã–π –≤ —Ä–∞–º–∫—É
        self.view = urwid.Frame(
            # header=self.header,
            body=self.create_mc_linebox(
                self.list_area, title=" üìí –ê–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ "),
            footer=self.footer
        )

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–≤–µ—Ä–ª–µ—è
        self.overlay = None

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ñ—É—Ç–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
    def update_footer(self):
        if not self.book.data:
            contact_info = "No contact selected"
        else:
            selected_contact = self.book.get_record_by_index(
                self.book.selected_index)
            contact_info = f"Selected: {selected_contact.get_name()}" if selected_contact else "No contact selected"
        self.menu.set_text(
            f"[‚Üë/‚Üì] Move  [Enter] Select  [A]dd  [E]dit  [D]elete [Q]uit | {contact_info}")

    def create_mc_linebox(self, widget, title=""):
        return urwid.LineBox(
            widget,
            title=title,
            tlcorner='‚îå', tline='‚îÄ', lline='‚îÇ',
            trcorner='‚îê', rline='‚îÇ',
            blcorner='‚îî', bline='‚îÄ', brcorner='‚îò'
        )

    def create_table_row(self, attr, columns, is_header=False):
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º"""
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        row_text = " ‚îÇ ".join(
            col.ljust(self.COLUMN_WEIGHTS[i]) for i, col in enumerate(columns)
        )
        # –°–æ–∑–¥–∞—ë–º Text-–≤–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É
        text_widget = urwid.Text(row_text, align='left')

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ AttrMap:
        # - –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å 'header'
        # - –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å 'default' + –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å 'reveal focus'
        if is_header:
            return urwid.AttrMap(text_widget, 'header')
        else:
            return urwid.AttrMap(text_widget, attr)  # , 'reveal focus')

    def build_contact_list(self):
        rows = []
        for idx, key in enumerate(self.book.data):
            # for key in self.book.data:
            record = self.book.data[key]
            attr = 'selected' if idx == self.book.selected_index else 'default'
            row_data = [
                record.get_name(),
                record.get_phones(),
                record.get_email(),
                record.get_address(),
                record.get_birthday(),
                record.get_notes()
            ]
            row = self.create_table_row(attr, row_data)
            # row = urwid.AttrMap(row, None, 'reveal focus') # –í–∞–∂–Ω–æ!
            row = urwid.AttrMap(row, attr)
            rows.append(row)
        return rows

    def refresh_list(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        current_focus = self.book.selected_index
        # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self.walker.clear()
        self.walker.extend(self.build_contact_list())
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if 0 <= current_focus < len(self.walker):
            self.walker.set_focus(current_focus)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä
        self.update_footer()

    def keypress(self, key):
        # if self.overlay_open:
        #     return  # –ü–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç popup, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        if key in ('q', 'Q'):
            raise urwid.ExitMainLoop()
        elif key in ('down',):
            self.update_footer()
            # self.show_error(
            #     f'sel index: {self.book.selected_index}, len: {len(self.book.data)}')
            if self.book.selected_index < len(self.book.data) - 1:
                self.book.selected_index += 1
        elif key in ('up',):
            self.update_footer()
            # self.show_error(
            #     f'sel index: {self.book.selected_index}, len: {len(self.book.data)}')
            if self.book.selected_index > 0:
                self.book.selected_index -= 1
        elif key == 'a':
            self.add_contact()
        elif key == 'd':
            if not self.book.data:
                return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞
            self.book.remove_record_by_index(self.book.selected_index)
        elif key == 'enter':
            if not self.book.data:
                return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞
            self.edit_contact(self.book.selected_index)
        elif key in ('h', 'H'):
            self.show_help()
        self.refresh_list()

    def create_contact_form(self, record=None):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
        # –ü–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_name = urwid.Edit("Name: ", record.get_name() if record else "")
        edit_phone = urwid.Edit(
            "Phone: ", record.get_phones() if record else "")
        edit_email = urwid.Edit(
            "E-Mail: ", record.get_email() if record else "")
        edit_address = urwid.Edit(
            "Address: ", record.get_address() if record else "")
        edit_birthday = urwid.Edit(
            "Birthday: ", record.get_birthday() if record else "")
        edit_notes = urwid.Edit(
            "Notes: ", record.get_notes() if record else "")

        # –ö–Ω–æ–ø–∫–∏
        s_button = urwid.Button("üíæ Save", align='center')
        cancel_button = urwid.Button(
            "‚ùå Cancel", self.close_popup, align='center')
        # –¶–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫
        save_button = urwid.AttrMap(
            s_button, 'button_green', focus_map='button_green_focus')
        cancel_button = urwid.AttrMap(
            cancel_button, 'button_red', focus_map='button_red_focus')
        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã
        pile = urwid.Pile([
            urwid.Divider(),
            edit_name,
            edit_phone,
            edit_email,
            edit_address,
            edit_birthday,
            edit_notes,
            urwid.Divider(),
            urwid.Columns([save_button, cancel_button],
                          dividechars=2, min_width=10),
            urwid.Divider()
        ])

        # –†–∞–º–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        if record:
            boxtitle = record.get_name()
        else:
            boxtitle = 'New record'
        title = f" ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî {boxtitle} "
        boxed = urwid.LineBox(
            pile,
            title=title,
            tlcorner='‚ï≠', tline='‚îÄ', lline='‚îÇ',
            trcorner='‚ïÆ', rline='‚îÇ',
            blcorner='‚ï∞', bline='‚îÄ', brcorner='‚ïØ',
            title_align='center')  # –ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ä–æ–≤–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É

        overlay = urwid.Overlay(
            boxed, self.view,
            align='center', width=('relative', 50),
            valign='middle', height=('relative', 50)
        )

        return overlay, s_button, (edit_name, edit_phone, edit_email, edit_address, edit_birthday, edit_notes)

    def add_contact(self):
        if not hasattr(self, 'loop'):
            raise RuntimeError(
                "Application loop is not initialized. Call run() first.")
        overlay, save_button, data = self.create_contact_form()
        urwid.connect_signal(save_button, 'click',
                             self.save_contact, data + (-1,))
        self.show_overlay(overlay)

    def edit_contact(self, index):
        if not hasattr(self, 'loop'):
            raise RuntimeError(
                "Application loop is not initialized. Call run() first.")
        record = self.book.get_record_by_index(index)
        if not record:
            return
        form, save_button, data = self.create_contact_form(record)
        urwid.connect_signal(save_button, 'click',
                             self.save_contact, data + (index,))
        self.show_overlay(form)

    def show_overlay(self, overlay):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥–∂–µ—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–≤–µ—Ä–ª–µ—è
        self.previous_widget = self.loop.widget
        self.loop.widget = overlay
        self.overlay_open = True

    def close_popup(self, button=None):
        if hasattr(self, 'previous_widget'):
            self.loop.widget = self.previous_widget
        self.overlay_open = False
        self.refresh_list()
        # –û—á–∏—Å—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        if button:
            urwid.disconnect_signal(button, 'click', self.save_contact)

    def save_contact(self, button, data):
        edit_name, edit_phone, edit_email, edit_address, edit_birthday, edit_notes, index = data
        new_rec = Record(
            edit_name.edit_text,
            edit_phone.edit_text,
            edit_birthday.edit_text,
            edit_email.edit_text,
            edit_address.edit_text,
            edit_notes.edit_text
        )
        if index >= 0:
            self.book.update_record_by_index(index, new_rec)
        else:
            self.book.add_record(new_rec)
        self.close_popup()

    def show_error(self, message):
        error_text = urwid.Text(
            ('button_red', f"\n‚ö†Ô∏è  {message}\n"), align='center')
        ok_button = urwid.Button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", self.close_popup)
        ok_button = urwid.AttrMap(
            ok_button, 'button_red', focus_map='button_red_focus')

        pile = urwid.Pile([
            error_text,
            urwid.Divider(),
            urwid.Padding(ok_button, align='center', width=12),
            urwid.Divider()
        ])

        box = urwid.LineBox(
            pile,
            title=" –û—à–∏–±–∫–∞ ",
            title_align='center',
            tlcorner='‚ï≠', tline='‚îÄ', lline='‚îÇ',
            trcorner='‚ïÆ', rline='‚îÇ',
            blcorner='‚ï∞', bline='‚îÄ', brcorner='‚ïØ'
        )

        overlay = urwid.Overlay(
            box, self.view,
            align='center', width=('relative', 50),
            valign='middle', height=('relative', 30)
        )
        self.show_overlay(overlay)

    def show_error1(self, message):
        error_text = urwid.Text(f"Error: {message}")
        overlay = urwid.Overlay(
            urwid.LineBox(error_text),
            self.view,
            'center', 40, 'middle', 10
        )
        self.loop.widget = overlay

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
        help_text = urwid.Text("""
        –ö–ª–∞–≤–∏—à–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        ‚Üë / ‚Üì       –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä
        Enter       –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        A           –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        E           –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        D           –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        Q           –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        """, align='left')
        ok_button = urwid.Button("OK", self.close_popup)
        ok_button = urwid.AttrMap(
            ok_button, 'button_green', focus_map='button_green_focus')
        pile = urwid.Pile([
            help_text,
            urwid.Divider(),
            urwid.Padding(ok_button, align='center', width=10)
        ])
        box = urwid.LineBox(pile, title="üìò –°–ø—Ä–∞–≤–∫–∞",
                            tlcorner='‚ï≠', tline='‚îÄ', lline='‚îÇ',
                            trcorner='‚ïÆ', rline='‚îÇ',
                            blcorner='‚ï∞', bline='‚îÄ', brcorner='‚ïØ',
                            title_align='center')
        overlay = urwid.Overlay(
            box, self.view, align='center', width=60, valign='middle', height=16)
        self.show_overlay(overlay)

    def run(self):
        self.loop = urwid.MainLoop(
            self.view, self.palette, unhandled_input=self.keypress)
        self.loop.run()
